package section3;

import java.util.concurrent.locks.Condition;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;

class Worker{
    private Lock lock = new ReentrantLock();
    private Condition condition = lock.newCondition();

    public void produce() throws InterruptedException{
        lock.lock();
        System.out.println("Producer method...");
        //wait
        condition.await();
        System.out.println("Again in producer method...");
    }

    public void consume() throws InterruptedException{
        Thread.sleep(2000);
        lock.lock();
        System.out.println("Consumer method...");
        Thread.sleep(3000);
        //notify
        condition.signal();
        lock.unlock();
    }
}

public class ProducerAndConsumerWithLock {

    public static void main(String[] args) throws InterruptedException {
        Thread t1 = new Thread(new Runnable() {
            @Override
            public void run() {
            }
        });

        Thread t2 = new Thread(new Runnable() {
            @Override
            public void run() {
            }
        });

        t1.start();
        t2.start();

        t1.join();
        t2.join();
    }

}
